#!/usr/bin/env python

"""Command-line argument parser.

Usage:
  docoptp <script> [--comment C] -- [...]
  docoptp -h | --help
  docoptp --version

Options:
  --comment C  comment delimiter [default: #]
  --           separate arguments to docopt and those to target script
  ...          arguments to pass to target script
  -h --help    display this help message
  --version    show version number

"""

import sys
from docopt import docopt


version = '0.1'
comment_char = '#'
boundary_idx = len(sys.argv)
script = None


def sanitized(x):
    """Santize Bash variable value."""
    return x.replace('"', '\\"').replace("$", "\\$")


# only arguments should be printed to stdout
# redirect all other output to stderr
stdout = sys.stdout
sys.stdout = sys.stderr

# parse arguments for docopt

i = 1
while i < len(sys.argv):
    arg = sys.argv[i]
    if arg == '--':
        boundary_idx = i
        # all remaining arguments are for target script
        break
    elif arg == '--help' or arg == '-h':
        print(__doc__)
        sys.exit()
    elif arg == '--version':
        print(version)
        sys.exit()
    elif arg.startswith('--comment'):
        # NB --comment='#' does not work because bash changes it to:
        #    --comment='
        try:
            i += 1
            comment_char = sys.argv[i]
        except:
            print('Error: missing argument for --comment.')
            sys.exit(1)
    else:
        if script is None:
            script = arg
        else:
            print(__doc__)
            print('Error: only one script can be specified.')
            print('Hint: Separate arguments to docoptp from arguments to script with --')
            sys.exit(1)
    i += 1

if script is None:
    print(__doc__)
    print('Error: no script specified.')
    sys.exit(1)

# extract docstring from target script
doc=''
with open(script) as inf:
    for line in inf:
        if line.startswith('#!'):
            # ignore shebang line
            pass
        elif line[0] == comment_char:
            j = 1
            if line[j] == ' ': j = 2
            # add to docstring with the intact trailing \n
            doc += line[j:]
        else:
            # docstring must be contiguous:
            # break on first non-comment line
            break

# parse arguments for target script
args = docopt(doc, argv=sys.argv[(boundary_idx+1):])


# print arguments for target script to stdout
# redirect output back to stdout
# NB  if target script reports strange error,
#     it is likely something went wrong here
sys.stdout = stdout
for arg, value in args.items():
    arg = arg.strip('-<>')
    if value is None: continue
    if isinstance(value, list):
        values = ['"{0}"'.format(sanitized(x)) for x in value]
        print('{0}=( {1} )'.format(arg, ' '.join(values)))
    elif isinstance(value, bool):
        if value:
            print('{0}=true'.format(arg))
        else:
            print('{0}=false'.format(arg))
    elif isinstance(value, int):
        print('{0}={1}'.format(arg, value))
    else:
        print('{0}="{1}"'.format(arg, sanitized(value)))

